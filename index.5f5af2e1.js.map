{"mappings":"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","sources":["<anon>","src/orbits.ts","src/entity.ts","src/inputs.ts","src/level.ts","src/body.ts","src/rocket.ts","src/ui.ts","src/helpers.ts"],"sourcesContent":["const $16adc9a2295ce702$export$938ba374bb8f26ee = 0.02;\nconst $16adc9a2295ce702$export$7f5af6dab45a6c6 = 5000;\nclass $16adc9a2295ce702$export$2e2bcd8739ae039 {\n    static{\n        this.idCounter = 0;\n    }\n    static{\n        this.entities = [];\n    }\n    constructor(position, rotation, size, velocity){\n        this.id = \"\";\n        this.position = {\n            x: 0,\n            y: 0\n        };\n        this.rotation = 0;\n        this.mass = 1;\n        this.size = {\n            x: 1,\n            y: 1\n        };\n        this.velocity = {\n            x: 0,\n            y: 0\n        };\n        this.orbitPoints = [];\n        this.tasks = {};\n        this.id = `e-${$16adc9a2295ce702$export$2e2bcd8739ae039.idCounter++}`;\n        if (position) this.position = position;\n        if (rotation) this.rotation = rotation;\n        if (size) this.size = size;\n        if (velocity) this.velocity = velocity;\n        this.renderOrbit = this.renderOrbit.bind(this);\n        $16adc9a2295ce702$export$2e2bcd8739ae039.entities.push(this);\n    }\n    simulateTrajectory() {\n    // This should be overridden\n    }\n    destroy() {\n        $16adc9a2295ce702$export$2e2bcd8739ae039.entities = $16adc9a2295ce702$export$2e2bcd8739ae039.entities.filter((e)=>e.id !== this.id);\n    }\n    update(deltaTime) {\n    // This should be overridden\n    }\n    render(options) {\n    // This should be overridden\n    }\n    renderOrbit(options, color = \"rgba(255, 255, 255, 0.3)\") {\n        const { ctx: ctx, eScreenPosition: eScreenPosition } = options;\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(eScreenPosition.x, eScreenPosition.y);\n        this.orbitPoints.forEach((point)=>{\n            const x = (point.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n            const y = (options.cameraPosition.y - point.y) * options.cameraSize + options.canvas.height / 2;\n            ctx.lineTo(x, y);\n        });\n        ctx.stroke();\n        if (this.orbitPoints.length < $16adc9a2295ce702$export$7f5af6dab45a6c6) {\n            const lastPoint = this.orbitPoints[this.orbitPoints.length - 1];\n            const cameraX = (lastPoint.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n            const cameraY = (options.cameraPosition.y - lastPoint.y) * options.cameraSize + options.canvas.height / 2;\n            const markerSize = 5;\n            ctx.strokeStyle = \"#F00\";\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(cameraX - markerSize, cameraY - markerSize);\n            ctx.lineTo(cameraX + markerSize, cameraY + markerSize);\n            ctx.moveTo(cameraX - markerSize, cameraY + markerSize);\n            ctx.lineTo(cameraX + markerSize, cameraY - markerSize);\n            ctx.stroke();\n        }\n    }\n}\n\n\nclass $fe083fb717b741f9$export$2e2bcd8739ae039 {\n    static{\n        this.mousePosition = {\n            x: 0,\n            y: 0\n        };\n    }\n    static{\n        this.mouseButtons = {};\n    }\n    static{\n        this.keys = {};\n    }\n    static{\n        // Flags for mouse/key click or key press\n        this.mouseClickFlags = {};\n    }\n    static{\n        this.keyClickFlags = {};\n    }\n    static init(canvas) {\n        window.addEventListener(\"mousemove\", $fe083fb717b741f9$export$2e2bcd8739ae039.onMouseMove);\n        window.addEventListener(\"mousedown\", $fe083fb717b741f9$export$2e2bcd8739ae039.onMouseDown, false);\n        window.addEventListener(\"mouseup\", $fe083fb717b741f9$export$2e2bcd8739ae039.onMouseUp, false);\n        window.addEventListener(\"keydown\", $fe083fb717b741f9$export$2e2bcd8739ae039.onKeyDown, false);\n        window.addEventListener(\"keyup\", $fe083fb717b741f9$export$2e2bcd8739ae039.onKeyUp, false);\n    }\n    static update() {\n        // Set key/mouse flags\n        $fe083fb717b741f9$export$2e2bcd8739ae039.mouseClickFlags = {\n            ...$fe083fb717b741f9$export$2e2bcd8739ae039.mouseButtons\n        };\n        $fe083fb717b741f9$export$2e2bcd8739ae039.keyClickFlags = {\n            ...$fe083fb717b741f9$export$2e2bcd8739ae039.keys\n        };\n    }\n    static isKeyDown(key) {\n        return $fe083fb717b741f9$export$2e2bcd8739ae039.keys[key];\n    }\n    static isKeyPressed(key) {\n        return $fe083fb717b741f9$export$2e2bcd8739ae039.keys[key] && !$fe083fb717b741f9$export$2e2bcd8739ae039.keyClickFlags[key];\n    }\n    static isMouseDown(button) {\n        return $fe083fb717b741f9$export$2e2bcd8739ae039.mouseButtons[button];\n    }\n    static isMousePressed(button) {\n        return $fe083fb717b741f9$export$2e2bcd8739ae039.mouseButtons[button] && !$fe083fb717b741f9$export$2e2bcd8739ae039.mouseClickFlags[button];\n    }\n    static onMouseMove(e) {\n        $fe083fb717b741f9$export$2e2bcd8739ae039.mousePosition = {\n            x: e.clientX,\n            y: e.clientY\n        };\n    }\n    static onMouseDown(e) {\n        $fe083fb717b741f9$export$2e2bcd8739ae039.mouseButtons[e.button] = true;\n    }\n    static onMouseUp(e) {\n        $fe083fb717b741f9$export$2e2bcd8739ae039.mouseButtons[e.button] = false;\n    }\n    static onKeyDown(e) {\n        $fe083fb717b741f9$export$2e2bcd8739ae039.keys[e.key] = true;\n    }\n    static onKeyUp(e) {\n        $fe083fb717b741f9$export$2e2bcd8739ae039.keys[e.key] = false;\n    }\n}\n\n\n\nclass $d96ca57136050667$export$2e2bcd8739ae039 extends (0, $16adc9a2295ce702$export$2e2bcd8739ae039) {\n    update(deltaTime) {\n        const deltaMp = deltaTime / (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * 2;\n        if (this.orbitBody !== null) {\n            // Calculate orbit relative to the orbit body\n            const distanceX = this.position.x - this.orbitBody.position.x;\n            const distanceY = this.position.y - this.orbitBody.position.y;\n            const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n            const force = this.orbitBody.mass / distance ** 2;\n            const forceX = force * (distanceX / distance);\n            const forceY = force * (distanceY / distance);\n            this.velocity.x -= forceX * (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * deltaMp;\n            this.velocity.y -= forceY * (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * deltaMp;\n        }\n        this.position.x += this.velocity.x * (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * deltaMp;\n        this.position.y += this.velocity.y * (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * deltaMp;\n        this.simulateTrajectory();\n    }\n    render(options) {\n        const { ctx: ctx, eScreenPosition: eScreenPosition, eScreenSize: eScreenSize } = options;\n        if (this.orbitPoints.length > 0) this.renderOrbit(options);\n        ctx.strokeStyle = \"white\";\n        ctx.fillStyle = \"white\";\n        ctx.beginPath();\n        ctx.arc(eScreenPosition.x, eScreenPosition.y, eScreenSize.x, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.fill();\n        if (this.tasks.orbit) this.renderHalo(options, this.tasks.orbit);\n    }\n    renderHalo(options, task) {\n        const { ctx: ctx } = options;\n        const timeRad = Date.now() / 10000 % (2 * Math.PI);\n        ctx.strokeStyle = task.enterTime ? \"#383\" : \"#555\";\n        ctx.setLineDash([\n            2,\n            5\n        ]); // Set the line dash pattern to create a dotted line\n        ctx.beginPath();\n        const cameraX = (this.position.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n        const cameraY = (options.cameraPosition.y - this.position.y) * options.cameraSize + options.canvas.height / 2;\n        const cameraRadius = options.cameraSize * task.radius;\n        ctx.arc(cameraX, cameraY, cameraRadius, timeRad, timeRad + 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset the line dash pattern to solid line\n    }\n    simulateTrajectory() {\n        const orbitPoints = [];\n        const step = (0, $16adc9a2295ce702$export$938ba374bb8f26ee);\n        const vel = {\n            x: this.velocity.x,\n            y: this.velocity.y\n        };\n        const pos = {\n            x: this.position.x,\n            y: this.position.y\n        };\n        for(let i = 0; i < (0, $16adc9a2295ce702$export$7f5af6dab45a6c6); i++)if (this.orbitBody) {\n            const distanceX = this.orbitBody.orbitPoints[i].x - pos.x;\n            const distanceY = this.orbitBody.orbitPoints[i].y - pos.y;\n            const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n            const force = this.orbitBody.mass / distance ** 2;\n            const forceX = force * (distanceX / distance);\n            const forceY = force * (distanceY / distance);\n            vel.x += forceX * step;\n            vel.y += forceY * step;\n            pos.x += vel.x * step;\n            pos.y += vel.y * step;\n            orbitPoints.push({\n                x: pos.x,\n                y: pos.y\n            });\n        } else orbitPoints.push({\n            x: pos.x,\n            y: pos.y\n        });\n        this.orbitPoints = orbitPoints;\n    }\n    constructor(...args){\n        super(...args);\n        this.orbitBody = null;\n    }\n}\n\n\n\n\n\n\n\n\nclass $e6ee564dbf6128e8$export$2e2bcd8739ae039 extends (0, $16adc9a2295ce702$export$2e2bcd8739ae039) {\n    pointDirection(dir, delta) {\n        const angle = Math.atan2(this.velocity.x * dir, this.velocity.y * dir);\n        const targetAngle = angle * 180 / Math.PI;\n        const rotationSpeed = 120; // adjust the rotation speed as desired\n        const maxRotationDelta = rotationSpeed * delta;\n        let angleDelta = targetAngle - this.rotation;\n        if (angleDelta > 180) angleDelta -= 360;\n        else if (angleDelta < -180) angleDelta += 360;\n        const rotationDirection = Math.sign(angleDelta);\n        const rotationAmount = rotationDirection * Math.min(Math.abs(angleDelta), maxRotationDelta);\n        this.rotation += rotationAmount;\n    }\n    update(deltaTime) {\n        const deltaMp = deltaTime / (0, $16adc9a2295ce702$export$938ba374bb8f26ee) * 2;\n        const step = (0, $16adc9a2295ce702$export$938ba374bb8f26ee);\n        (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities.forEach((ent)=>{\n            if (ent instanceof (0, $d96ca57136050667$export$2e2bcd8739ae039)) {\n                const distanceX = ent.position.x - this.position.x;\n                const distanceY = ent.position.y - this.position.y;\n                const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n                const force = ent.mass / distance ** 2;\n                const forceX = force * (distanceX / distance);\n                const forceY = force * (distanceY / distance);\n                this.velocity.x += forceX * step * deltaMp;\n                this.velocity.y += forceY * step * deltaMp;\n            }\n        });\n        // Disable inputs on screens\n        if ((0, $a4d7408a1d73b56e$export$2e2bcd8739ae039).state === (0, $a4d7408a1d73b56e$export$50ad20ae8c03d265).GAME) {\n            if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"ArrowLeft\") || (0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"a\")) this.rotation -= 120 * deltaTime;\n            else if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"ArrowRight\") || (0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"d\")) this.rotation += 120 * deltaTime;\n            if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\" \")) {\n                const thrust = 1;\n                const directionVector = {\n                    x: Math.sin(Math.PI / 180 * this.rotation),\n                    y: Math.cos(Math.PI / 180 * this.rotation)\n                };\n                this.velocity.x += thrust * directionVector.x * step * deltaMp;\n                this.velocity.y += thrust * directionVector.y * step * deltaMp;\n            }\n            if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"s\")) this.pointDirection(-1, deltaTime);\n            else if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyDown(\"w\")) this.pointDirection(1, deltaTime);\n        }\n        this.position.x += this.velocity.x * step * deltaMp;\n        this.position.y += this.velocity.y * step * deltaMp;\n        for (let ent of (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities)if (ent instanceof (0, $d96ca57136050667$export$2e2bcd8739ae039)) {\n            // Calculate distance between rocket and body\n            // If the distance is less than the body's size, the rocket has crashed\n            const distanceX = ent.position.x - this.position.x;\n            const distanceY = ent.position.y - this.position.y;\n            const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n            if (distance < ent.size.x) {\n                (0, $a4d7408a1d73b56e$export$2e2bcd8739ae039).endGame(false);\n                break;\n            }\n            // Check tasks\n            if (ent.tasks) for(let t in ent.tasks){\n                const task = ent.tasks[t];\n                if (task.completed) continue;\n                if (t === \"orbit\") {\n                    const orbitTask = task;\n                    if (distance < orbitTask.radius) {\n                        if (!orbitTask.enterTime) orbitTask.enterTime = Date.now();\n                        else if (Date.now() - orbitTask.enterTime > orbitTask.time) task.completed = true;\n                    } else orbitTask.enterTime = undefined;\n                }\n            }\n        }\n        this.rotation = this.rotation % 360;\n        this.simulateTrajectory();\n    }\n    render(options) {\n        const { ctx: ctx, eScreenPosition: eScreenPosition, eScreenSize: eScreenSize } = options;\n        this.renderOrbit(options, \"rgba(255, 255, 255, 1)\");\n        ctx.strokeStyle = \"white\";\n        ctx.fillStyle = \"white\";\n        ctx.save();\n        ctx.translate(eScreenPosition.x, eScreenPosition.y);\n        ctx.rotate(Math.PI / 180 * this.rotation);\n        ctx.beginPath();\n        ctx.moveTo(-eScreenSize.x / 2, eScreenSize.y / 2);\n        ctx.lineTo(eScreenSize.x / 2, eScreenSize.y / 2);\n        ctx.lineTo(0, -eScreenSize.y / 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore();\n    }\n    simulateTrajectory() {\n        const orbitPoints = [];\n        const step = (0, $16adc9a2295ce702$export$938ba374bb8f26ee);\n        const vel = {\n            x: this.velocity.x,\n            y: this.velocity.y\n        };\n        const pos = {\n            x: this.position.x,\n            y: this.position.y\n        };\n        for(let i = 0; i < (0, $16adc9a2295ce702$export$7f5af6dab45a6c6); i++){\n            let exit = false;\n            for (let ent of (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities)if (ent instanceof (0, $d96ca57136050667$export$2e2bcd8739ae039)) {\n                let px = ent.position.x;\n                let py = ent.position.y;\n                if (ent.orbitPoints.length > i) {\n                    px = ent.orbitPoints[i].x;\n                    py = ent.orbitPoints[i].y;\n                }\n                const distanceX = px - pos.x;\n                const distanceY = py - pos.y;\n                const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n                if (distance < ent.size.x) {\n                    exit = true;\n                    break;\n                }\n                const force = ent.mass / distance ** 2;\n                const forceX = force * (distanceX / distance);\n                const forceY = force * (distanceY / distance);\n                vel.x += forceX * step;\n                vel.y += forceY * step;\n            }\n            if (exit) break;\n            orbitPoints.push({\n                x: pos.x,\n                y: pos.y\n            });\n            pos.x += vel.x * step;\n            pos.y += vel.y * step;\n        }\n        this.orbitPoints = orbitPoints;\n    }\n}\n\n\nconst $84ab826914df134a$var$levels = [\n    \"levels/level1.json\",\n    \"levels/level2.json\",\n    \"levels/level3.json\",\n    \"levels/level4.json\"\n];\nconst $84ab826914df134a$var$levelBoxSize = 25;\nconst $84ab826914df134a$var$levelBoxSpacing = 5;\nclass $84ab826914df134a$export$2e2bcd8739ae039 {\n    static{\n        this.currentLevel = null;\n    }\n    constructor(path, data){\n        this.path = \"\";\n        this.tasks = [];\n        this.entities = [];\n        this.path = path;\n        this.rawData = data;\n    }\n    destroy() {\n        this.entities = [];\n    }\n    static load(path) {\n        (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities = [];\n        (0, $a4d7408a1d73b56e$export$2e2bcd8739ae039).state = (0, $a4d7408a1d73b56e$export$50ad20ae8c03d265).GAME;\n        fetch(path).then((response)=>response.json()).then((data)=>{\n            const orbits = {};\n            const tsks = [];\n            data.level.bodies.forEach((body)=>{\n                const b = new (0, $d96ca57136050667$export$2e2bcd8739ae039)(body.position, 0, {\n                    x: body.radius,\n                    y: body.radius\n                }, body.velocity || {\n                    x: 0,\n                    y: 0\n                });\n                b.mass = body.mass;\n                if (body.id) b.id = body.id;\n                if (body.orbits) orbits[b.id] = body.orbits;\n                if (body.tasks) {\n                    b.tasks = body.tasks;\n                    Object.keys(body.tasks).forEach((task)=>{\n                        if (body.tasks) tsks.push({\n                            type: task,\n                            entity: b,\n                            data: body.tasks[task]\n                        });\n                    });\n                }\n            });\n            if (data.level.player) {\n                const player = data.level.player;\n                const rct = new (0, $e6ee564dbf6128e8$export$2e2bcd8739ae039)(player.position || {\n                    x: 0,\n                    y: 0\n                }, player.rotation || 0, {\n                    x: 0.5,\n                    y: 0.75\n                });\n                rct.velocity = player.velocity || {\n                    x: 0,\n                    y: 0\n                };\n                rct.rotation = player.rotation || 0;\n            }\n            Object.keys(orbits).forEach((bodyId)=>{\n                const body = (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities.find((e)=>e.id === bodyId);\n                if (body) {\n                    const orbitBody = (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities.find((e)=>e.id === orbits[bodyId]);\n                    body.orbitBody = orbitBody;\n                }\n            });\n            const lvl = new $84ab826914df134a$export$2e2bcd8739ae039(path, data);\n            lvl.tasks = tsks;\n            $84ab826914df134a$export$2e2bcd8739ae039.currentLevel = lvl;\n        });\n    }\n    static renderLevelSelect(options) {\n        const { canvas: canvas, ctx: ctx } = options;\n        const menuHeight = $84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing * 2;\n        const menuWidth = ($84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing) * $84ab826914df134a$var$levels.length - $84ab826914df134a$var$levelBoxSpacing;\n        const menuX = (canvas.width - menuWidth) / 2;\n        const menuY = canvas.height - menuHeight - 10;\n        ctx.font = \"12px monospace\";\n        ctx.fillStyle = \"white\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        $84ab826914df134a$var$levels.forEach((level, index)=>{\n            const levelBoxX = menuX + index * ($84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing) + $84ab826914df134a$var$levelBoxSpacing;\n            const levelBoxY = menuY + $84ab826914df134a$var$levelBoxSpacing;\n            const levelBoxText = (index + 1).toString();\n            ctx.strokeStyle = \"white\";\n            ctx.strokeRect(levelBoxX, levelBoxY, $84ab826914df134a$var$levelBoxSize, $84ab826914df134a$var$levelBoxSize);\n            ctx.fillStyle = \"white\";\n            ctx.fillText(levelBoxText, levelBoxX + $84ab826914df134a$var$levelBoxSize / 2, levelBoxY + $84ab826914df134a$var$levelBoxSize / 2);\n        });\n    }\n    static onLevelSelectClick(options, mousePosition) {\n        const { canvas: canvas } = options;\n        const menuHeight = $84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing * 2;\n        const menuWidth = ($84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing) * $84ab826914df134a$var$levels.length - $84ab826914df134a$var$levelBoxSpacing;\n        const menuX = (canvas.width - menuWidth) / 2;\n        const menuY = canvas.height - menuHeight - 10;\n        $84ab826914df134a$var$levels.forEach((level, index)=>{\n            const levelBoxX = menuX + index * ($84ab826914df134a$var$levelBoxSize + $84ab826914df134a$var$levelBoxSpacing) + $84ab826914df134a$var$levelBoxSpacing;\n            const levelBoxY = menuY + $84ab826914df134a$var$levelBoxSpacing;\n            if (mousePosition.x > levelBoxX && mousePosition.x < levelBoxX + $84ab826914df134a$var$levelBoxSize && mousePosition.y > levelBoxY && mousePosition.y < levelBoxY + $84ab826914df134a$var$levelBoxSize) $84ab826914df134a$export$2e2bcd8739ae039.load(level);\n        });\n    }\n}\n\n\n\n/**\n * Transforms an angle in degrees to radians\n * @param angle \n * @returns \n */ function $3c260e55dc652601$export$b1b275608b2b1b8(angle) {\n    return angle * Math.PI / 180;\n}\nfunction $3c260e55dc652601$export$b2ba2578f2c43d74(radians) {\n    return radians * 180 / Math.PI;\n}\nfunction $3c260e55dc652601$export$89440da1893f4202(ctx, text, maxWidth) {\n    var words = text.split(\" \");\n    var lines = [];\n    var currentLine = words[0];\n    for(var i = 1; i < words.length; i++){\n        var word = words[i];\n        var width = ctx.measureText(currentLine + \" \" + word).width;\n        if (width < maxWidth) currentLine += \" \" + word;\n        else {\n            lines.push(currentLine);\n            currentLine = word;\n        }\n    }\n    lines.push(currentLine);\n    return lines;\n}\n\n\nclass $2f4cd9ba4fceb80d$export$2e2bcd8739ae039 {\n    static renderTasks(options, tasks) {\n        const { ctx: ctx } = options;\n        const boxWidth = 170;\n        let boxHeight = 30;\n        ctx.font = \"12px monospace\";\n        ctx.fillStyle = \"white\";\n        ctx.strokeStyle = \"white\";\n        ctx.textAlign = \"left\";\n        ctx.textBaseline = \"middle\";\n        tasks.forEach((task, index)=>{\n            ctx.font = \"12px monospace\";\n            const x = 15;\n            const lines = (0, $3c260e55dc652601$export$89440da1893f4202)(ctx, task.data.info, 120);\n            const y = 40 + 20 * lines.length * index;\n            boxHeight += 20 * lines.length;\n            for(let i = 0; i < lines.length; i++)ctx.fillText(lines[i], x, y + 15 * i);\n            switch(task.type){\n                case \"orbit\":\n                    const t = task.data;\n                    if (t.completed) {\n                        ctx.font = \"bold 18px monospace\";\n                        ctx.fillText(\"\\u2713\", 152, y + 7);\n                    } else if (t.enterTime) {\n                        const time = Date.now() - t.enterTime;\n                        const left = (t.time - time) / 1000;\n                        const timeString = `${left.toFixed(1)}s`;\n                        ctx.fillText(timeString, 145, y + 15 * (lines.length / 2));\n                    }\n                    break;\n            }\n        });\n        ctx.beginPath();\n        ctx.strokeRect(10, 10, boxWidth, boxHeight);\n        ctx.fillText(\"Tasks\", 15, 20);\n        ctx.beginPath();\n        ctx.moveTo(10, 30);\n        ctx.lineTo(10 + boxWidth, 30);\n        ctx.stroke();\n        ctx.beginPath();\n        ctx.moveTo(140, 10);\n        ctx.lineTo(140, 10 + boxHeight);\n        ctx.stroke();\n    }\n    static renderFailScreen(options) {\n        const { canvas: canvas, ctx: ctx } = options;\n        ctx.globalCompositeOperation = \"difference\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"bold 48px monospace\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"You died\", canvas.width / 2, canvas.height / 2);\n        ctx.font = \"24px monospace\";\n        ctx.fillText(\"Press R to restart\", canvas.width / 2, canvas.height / 2 + 50);\n        ctx.globalCompositeOperation = \"source-over\";\n    }\n    static renderWinScreen(options) {\n        const { canvas: canvas, ctx: ctx } = options;\n        ctx.globalCompositeOperation = \"difference\";\n        ctx.fillStyle = \"white\";\n        ctx.font = \"bold 48px monospace\";\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillText(\"You win\", canvas.width / 2, canvas.height / 2);\n        ctx.font = \"24px monospace\";\n        ctx.fillText(\"Press R to restart\", canvas.width / 2, canvas.height / 2 + 50);\n        ctx.globalCompositeOperation = \"source-over\";\n    }\n}\n\n\nvar $a4d7408a1d73b56e$export$50ad20ae8c03d265;\n(function(OrbitsState) {\n    OrbitsState[OrbitsState[\"GAME\"] = 0] = \"GAME\";\n    OrbitsState[OrbitsState[\"FAILSCREEN\"] = 1] = \"FAILSCREEN\";\n    OrbitsState[OrbitsState[\"WINSCREEN\"] = 2] = \"WINSCREEN\";\n})($a4d7408a1d73b56e$export$50ad20ae8c03d265 || ($a4d7408a1d73b56e$export$50ad20ae8c03d265 = {}));\nclass $a4d7408a1d73b56e$export$2e2bcd8739ae039 {\n    static{\n        // Camera position\n        this.cameraPosition = {\n            x: 0,\n            y: 0\n        };\n    }\n    static{\n        // Camera size\n        this.cameraSize = 10;\n    }\n    static{\n        this.lastFrameTime = Date.now();\n    }\n    static{\n        this.state = 0;\n    }\n    static init() {\n        // Get canvas\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas = document.getElementById(\"orbits-canvas\");\n        // Get context\n        // @ts-ignore Context may be null, so ignore this for ease of use of ctx\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx = $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.getContext(\"2d\");\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx.imageSmoothingEnabled = false;\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx.imageSmoothingQuality = \"high\";\n        // Update canvas size\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.updateCanvasSize();\n        // Add event listener to update canvas size\n        window.addEventListener(\"resize\", $a4d7408a1d73b56e$export$2e2bcd8739ae039.updateCanvasSize);\n        // Init inputs\n        (0, $fe083fb717b741f9$export$2e2bcd8739ae039).init($a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas);\n        // Load level\n        (0, $84ab826914df134a$export$2e2bcd8739ae039).load(\"levels/level1.json\");\n        // Start loop\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.update();\n    }\n    static updateCanvasSize() {\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.width = window.innerWidth;\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.height = window.innerHeight;\n    }\n    static update() {\n        const now = Date.now();\n        for (let ent of (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities)ent.update((now - $a4d7408a1d73b56e$export$2e2bcd8739ae039.lastFrameTime) / 1000);\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.lastFrameTime = now;\n        if ($a4d7408a1d73b56e$export$2e2bcd8739ae039.state === 0) {\n            if ((0, $84ab826914df134a$export$2e2bcd8739ae039).currentLevel) {\n                if ((0, $84ab826914df134a$export$2e2bcd8739ae039).currentLevel.tasks.every((t)=>t.data.completed)) $a4d7408a1d73b56e$export$2e2bcd8739ae039.endGame(true);\n            }\n        }\n        // Render\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.render();\n        if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isKeyPressed(\"r\")) (0, $84ab826914df134a$export$2e2bcd8739ae039).load((0, $84ab826914df134a$export$2e2bcd8739ae039).currentLevel?.path || \"levels/level1.json\");\n        const options = {\n            cameraPosition: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraPosition,\n            cameraSize: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize,\n            canvas: $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas,\n            ctx: $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx\n        };\n        if ((0, $fe083fb717b741f9$export$2e2bcd8739ae039).isMousePressed(0)) (0, $84ab826914df134a$export$2e2bcd8739ae039).onLevelSelectClick(options, (0, $fe083fb717b741f9$export$2e2bcd8739ae039).mousePosition);\n        // Reset inputs\n        (0, $fe083fb717b741f9$export$2e2bcd8739ae039).update();\n        // Loop\n        requestAnimationFrame($a4d7408a1d73b56e$export$2e2bcd8739ae039.update);\n    }\n    static render() {\n        // Clear canvas\n        $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx.clearRect(0, 0, $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.width, $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.height);\n        const options = {\n            cameraPosition: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraPosition,\n            cameraSize: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize,\n            canvas: $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas,\n            ctx: $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx\n        };\n        // Render entities\n        (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities.forEach((e)=>e.render({\n                ...options,\n                eScreenPosition: {\n                    x: (e.position.x - $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraPosition.x) * $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize + $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.width / 2,\n                    y: ($a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraPosition.y - e.position.y) * $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize + $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas.height / 2\n                },\n                eScreenSize: {\n                    x: e.size.x * $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize,\n                    y: e.size.y * $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize\n                }\n            }));\n        switch($a4d7408a1d73b56e$export$2e2bcd8739ae039.state){\n            case 0:\n                if ((0, $84ab826914df134a$export$2e2bcd8739ae039).currentLevel) // Render UI\n                (0, $2f4cd9ba4fceb80d$export$2e2bcd8739ae039).renderTasks({\n                    cameraPosition: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraPosition,\n                    cameraSize: $a4d7408a1d73b56e$export$2e2bcd8739ae039.cameraSize,\n                    canvas: $a4d7408a1d73b56e$export$2e2bcd8739ae039.canvas,\n                    ctx: $a4d7408a1d73b56e$export$2e2bcd8739ae039.ctx\n                }, (0, $84ab826914df134a$export$2e2bcd8739ae039).currentLevel.tasks);\n                break;\n            case 1:\n                (0, $2f4cd9ba4fceb80d$export$2e2bcd8739ae039).renderFailScreen(options);\n                break;\n            case 2:\n                (0, $2f4cd9ba4fceb80d$export$2e2bcd8739ae039).renderWinScreen(options);\n                break;\n        }\n        (0, $84ab826914df134a$export$2e2bcd8739ae039).renderLevelSelect(options);\n    }\n    static endGame(win) {\n        if ($a4d7408a1d73b56e$export$2e2bcd8739ae039.state === 0) $a4d7408a1d73b56e$export$2e2bcd8739ae039.state = win ? 2 : 1;\n        if (!win) {\n            // Destroy rocket\n            const rocket = (0, $16adc9a2295ce702$export$2e2bcd8739ae039).entities.find((e)=>e instanceof (0, $e6ee564dbf6128e8$export$2e2bcd8739ae039));\n            if (rocket) rocket.destroy();\n        }\n    }\n}\nwindow.addEventListener(\"load\", $a4d7408a1d73b56e$export$2e2bcd8739ae039.init);\n\n\n//# sourceMappingURL=index.5f5af2e1.js.map\n","import Body from \"./body\";\nimport Entity, { Vector2 } from \"./entity\";\nimport Inputs from \"./inputs\";\nimport Level from \"./level\";\nimport Rocket from \"./rocket\";\nimport UI from \"./ui\";\n\nexport enum OrbitsState {\n    GAME,\n    FAILSCREEN,\n    WINSCREEN\n}\n\nexport interface RenderOptions {\n    cameraPosition: Vector2;\n    cameraSize: number;\n    canvas: HTMLCanvasElement;\n    ctx: CanvasRenderingContext2D;\n}\n\nexport default class Orbits {\n    // Canvas\n    private static canvas: HTMLCanvasElement;\n\n    // Context\n    private static ctx: CanvasRenderingContext2D;\n\n    // Camera position\n    private static cameraPosition = { x: 0, y: 0 };\n    // Camera size\n    private static cameraSize = 10;\n\n    private static lastFrameTime = Date.now();\n\n    public static state: OrbitsState = OrbitsState.GAME;\n\n    public static init() {\n        // Get canvas\n        Orbits.canvas = document.getElementById('orbits-canvas') as HTMLCanvasElement;\n        // Get context\n        // @ts-ignore Context may be null, so ignore this for ease of use of ctx\n        Orbits.ctx = Orbits.canvas.getContext('2d');\n\n        Orbits.ctx.imageSmoothingEnabled = false;\n        Orbits.ctx.imageSmoothingQuality = 'high';\n\n        // Update canvas size\n        Orbits.updateCanvasSize();\n\n        // Add event listener to update canvas size\n        window.addEventListener('resize', Orbits.updateCanvasSize);\n\n        // Init inputs\n        Inputs.init(Orbits.canvas);\n\n        // Load level\n        Level.load('levels/level1.json');\n\n        // Start loop\n        Orbits.update();\n    }\n\n    private static updateCanvasSize() {\n        Orbits.canvas.width = window.innerWidth;\n        Orbits.canvas.height = window.innerHeight;\n    }\n\n    private static update() {\n        const now = Date.now();\n        for (let ent of Entity.entities) {\n            ent.update((now - Orbits.lastFrameTime) / 1000);\n        }\n        Orbits.lastFrameTime = now;\n\n        if(Orbits.state === OrbitsState.GAME) {\n            if(Level.currentLevel) {\n                if(Level.currentLevel.tasks.every(t => t.data.completed)) {\n                    Orbits.endGame(true);\n                }\n            }\n        }\n\n        // Render\n        Orbits.render();\n\n        if(Inputs.isKeyPressed('r')) {\n            Level.load(Level.currentLevel?.path || 'levels/level1.json');\n        }\n\n        const options: RenderOptions = {\n            cameraPosition: Orbits.cameraPosition,\n            cameraSize: Orbits.cameraSize,\n            canvas: Orbits.canvas,\n            ctx: Orbits.ctx\n        };\n\n        if(Inputs.isMousePressed(0)) {\n            Level.onLevelSelectClick(options, Inputs.mousePosition);\n        }\n\n        // Reset inputs\n        Inputs.update();\n\n\n        // Loop\n        requestAnimationFrame(Orbits.update);\n    }\n\n    private static render() {\n        // Clear canvas\n        Orbits.ctx.clearRect(0, 0, Orbits.canvas.width, Orbits.canvas.height);\n\n        const options: RenderOptions = {\n            cameraPosition: Orbits.cameraPosition,\n            cameraSize: Orbits.cameraSize,\n            canvas: Orbits.canvas,\n            ctx: Orbits.ctx\n        };\n\n        // Render entities\n        Entity.entities.forEach(e => e.render({\n            ...options,\n            eScreenPosition: {\n                x: (e.position.x - Orbits.cameraPosition.x) * Orbits.cameraSize + Orbits.canvas.width / 2,\n                y: (Orbits.cameraPosition.y - e.position.y) * Orbits.cameraSize + Orbits.canvas.height / 2\n            },\n            eScreenSize: {\n                x: e.size.x * Orbits.cameraSize,\n                y: e.size.y * Orbits.cameraSize\n            }\n        }));\n\n        switch (Orbits.state) {\n            case OrbitsState.GAME:\n                if (Level.currentLevel) {\n                    // Render UI\n                    UI.renderTasks({\n                        cameraPosition: Orbits.cameraPosition,\n                        cameraSize: Orbits.cameraSize,\n                        canvas: Orbits.canvas,\n                        ctx: Orbits.ctx\n                    }, Level.currentLevel.tasks);\n                }\n                break;\n            case OrbitsState.FAILSCREEN:\n                UI.renderFailScreen(options);\n                break;\n            case OrbitsState.WINSCREEN:\n                UI.renderWinScreen(options);\n                break;\n        }\n\n        Level.renderLevelSelect(options);\n    }\n\n    public static endGame (win: boolean) {\n        if(Orbits.state === OrbitsState.GAME)\n            Orbits.state = win ? OrbitsState.WINSCREEN : OrbitsState.FAILSCREEN;\n\n        if(!win) {\n            // Destroy rocket\n            const rocket = Entity.entities.find(e => e instanceof Rocket) as Rocket;\n            if(rocket) rocket.destroy();\n        }\n    }\n}\n\nwindow.addEventListener('load', Orbits.init);","import { TaskData } from \"./level\";\nimport { RenderOptions } from \"./orbits\";\n\nexport type Vector2 = {\n    x: number,\n    y: number\n};\n\nexport interface EntityRenderOptions extends RenderOptions{\n    // Center position of the entity in screen coordinates\n    eScreenPosition:    Vector2,\n    // Size of the entity on the screen\n    eScreenSize:        Vector2\n};\n\nexport const PHYSICS_STEP = 0.02;\nexport const PHYSICS_TRAJECTORY_BUFFER_SIZE = 5000;\n\nexport default class Entity {\n\n    private static idCounter: number = 0;\n\n    public static entities: Entity[] = [];\n\n    id: string = '';\n\n    position: Vector2 = {\n        x: 0,\n        y: 0\n    }\n\n    rotation: number = 0;\n\n    mass: number = 1;\n\n    size: Vector2 = {\n        x: 1,\n        y: 1\n    }\n\n    velocity: Vector2 = {\n        x: 0,\n        y: 0\n    }\n\n    orbitPoints: Vector2[] = [];\n\n    tasks: { [key: string]: TaskData } = {};\n\n    constructor(position?: Vector2, rotation?: number, size?: Vector2, velocity?: Vector2) {\n        this.id = `e-${Entity.idCounter++}`;\n        if (position) this.position = position;\n        if (rotation) this.rotation = rotation;\n        if (size) this.size = size;\n        if (velocity) this.velocity = velocity;\n\n        this.renderOrbit = this.renderOrbit.bind(this);\n\n        Entity.entities.push(this);\n    }\n\n    simulateTrajectory () {\n        // This should be overridden\n    }\n\n    destroy () {\n        Entity.entities = Entity.entities.filter(e => e.id !== this.id);\n    }\n\n    update (deltaTime: number) {\n        // This should be overridden\n    }\n\n    render (options: EntityRenderOptions) {\n        // This should be overridden\n    }\n\n    renderOrbit (options: EntityRenderOptions, color: string = 'rgba(255, 255, 255, 0.3)') {\n        const { ctx, eScreenPosition } = options;\n\n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        ctx.moveTo(eScreenPosition.x, eScreenPosition.y);\n        this.orbitPoints.forEach(point => {\n            const x = (point.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n            const y = (options.cameraPosition.y - point.y) * options.cameraSize + options.canvas.height / 2;\n            ctx.lineTo(x, y);\n        });\n        ctx.stroke();\n\n        if (this.orbitPoints.length < PHYSICS_TRAJECTORY_BUFFER_SIZE) {\n            const lastPoint = this.orbitPoints[this.orbitPoints.length - 1];\n            const cameraX = (lastPoint.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n            const cameraY = (options.cameraPosition.y - lastPoint.y) * options.cameraSize + options.canvas.height / 2;\n            const markerSize = 5;\n\n            ctx.strokeStyle = '#F00';\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(cameraX - markerSize, cameraY - markerSize);\n            ctx.lineTo(cameraX + markerSize, cameraY + markerSize);\n            ctx.moveTo(cameraX - markerSize, cameraY + markerSize);\n            ctx.lineTo(cameraX + markerSize, cameraY - markerSize);\n            ctx.stroke();\n        }\n    }\n}","import { Vector2 } from \"./entity\";\n\nexport default class Inputs {\n\n    public static mousePosition: Vector2 = { x: 0, y: 0 };\n\n    private static mouseButtons: {[key: number]: boolean} = {};\n    private static keys: {[key: string]: boolean} = {};\n\n    // Flags for mouse/key click or key press\n    private static mouseClickFlags: {[key: number]: boolean} = {};\n    private static keyClickFlags: {[key: string]: boolean} = {};\n\n    public static init (canvas: HTMLCanvasElement) {\n        window.addEventListener('mousemove', Inputs.onMouseMove);\n        window.addEventListener('mousedown', Inputs.onMouseDown, false);\n        window.addEventListener('mouseup', Inputs.onMouseUp, false);\n\n        window.addEventListener('keydown', Inputs.onKeyDown, false);\n        window.addEventListener('keyup', Inputs.onKeyUp, false);\n\n    }\n\n    public static update () {\n        // Set key/mouse flags\n        Inputs.mouseClickFlags = {...Inputs.mouseButtons};\n        Inputs.keyClickFlags = {...Inputs.keys};\n    }\n\n    public static isKeyDown (key: string) {\n        return Inputs.keys[key];\n    }\n\n    public static isKeyPressed (key: string) {\n        return Inputs.keys[key] && !Inputs.keyClickFlags[key];\n    }\n\n    public static isMouseDown (button: number) {\n        return Inputs.mouseButtons[button];\n    }\n\n    public static isMousePressed (button: number) {\n        return Inputs.mouseButtons[button] && !Inputs.mouseClickFlags[button];\n    }\n\n    private static onMouseMove (e: MouseEvent) {\n        Inputs.mousePosition = { x: e.clientX, y: e.clientY };\n    }\n\n    private static onMouseDown (e: MouseEvent) {\n        Inputs.mouseButtons[e.button] = true;\n    }\n\n    private static onMouseUp (e: MouseEvent) {\n        Inputs.mouseButtons[e.button] = false;\n    }\n\n    private static onKeyDown (e: KeyboardEvent) {\n        Inputs.keys[e.key] = true;\n    }\n\n    private static onKeyUp (e: KeyboardEvent) {\n        Inputs.keys[e.key] = false;\n    }\n}","import Body from \"./body\";\nimport Entity, { Vector2 } from \"./entity\";\nimport Orbits, { OrbitsState, RenderOptions } from \"./orbits\";\nimport Rocket from \"./rocket\";\n\nexport interface TaskData {\n    // Info\n    info: string,\n    // Is completed?\n    completed?: boolean\n}\n\nexport interface OrbitTaskData extends TaskData {\n    // Radius of the orbit\n    radius: number,\n    // Time in milliseconds\n    time: number,\n    // Time when the rocket entered the orbit\n    enterTime?: number\n}\n\nexport type Task = {\n    type: string,\n    entity?: Entity,\n    data: TaskData\n}\n\nexport type LevelBody = {\n    // Mass of the body\n    mass: number,\n    // Radius of the body\n    radius: number,\n    // Position of the body\n    position: Vector2,\n    // Velocity of the body\n    velocity?: Vector2,\n    // Orbits body ID\n    orbits?: string,\n    // ID of the body\n    id?: string,\n    // Tasks of the body\n    tasks?: { [key: string]: TaskData }\n}\n\nexport type LevelPlayer = {\n    // Position of the player\n    position: Vector2,\n    // Velocity of the player\n    velocity?: Vector2,\n    // Rotation of the player\n    rotation?: number,\n    // Tasks of the player\n    tasks?: { [key: string]: TaskData }\n\n}\n\nexport type LevelData = {\n    // Name of the level\n    name: string,\n    // Description of the level\n    description?: string,\n    // Version\n    version: string,\n    // Author\n    author: string,\n\n    // Level data\n    level: {\n        // Bodies\n        bodies: LevelBody[],\n        // Player\n        player: LevelPlayer\n    }\n}\n\nconst levels = [\n    'levels/level1.json',\n    'levels/level2.json',\n    'levels/level3.json',\n    'levels/level4.json',\n];\n\nconst levelBoxSize = 25;\nconst levelBoxSpacing = 5;\n\n\nexport default class Level {\n\n    public static currentLevel: Level | null = null;\n\n    public path: string = \"\";\n\n    public rawData: LevelData;\n\n    public tasks: Task[] = [];\n\n    public entities: Entity[] = [];\n\n    constructor (path: string, data: LevelData) {\n        this.path = path;\n        this.rawData = data;\n    }\n\n    public destroy () {\n        this.entities = [];\n    }\n\n\n    public static load (path: string) {\n        Entity.entities = [];\n        Orbits.state = OrbitsState.GAME;\n\n        fetch(path)\n            .then(response => response.json())\n            .then((data: LevelData) => {\n                const orbits: {[key: string]: string} = {};\n                const tsks: Task[] = [];\n\n                data.level.bodies.forEach(body => {\n                    const b = new Body(body.position, 0, { x: body.radius, y: body.radius }, body.velocity || { x: 0, y: 0 });\n                    b.mass = body.mass;\n                    if(body.id) b.id = body.id;\n                    if (body.orbits) orbits[b.id] = body.orbits;\n                    if (body.tasks) {\n                        b.tasks = body.tasks;\n                        Object.keys(body.tasks).forEach(task => {\n                            if(body.tasks)\n                                tsks.push({ type: task, entity: b, data: body.tasks[task] });\n                        });\n                    }\n                });\n\n                if (data.level.player) {\n                    const player = data.level.player;\n                    const rct = new Rocket(player.position || { x: 0, y: 0 }, player.rotation || 0, { x: 0.5, y: 0.75 });\n                    rct.velocity = player.velocity || { x: 0, y: 0 };\n                    rct.rotation = player.rotation || 0;\n                }\n\n                Object.keys(orbits).forEach(bodyId => {\n                    const body = Entity.entities.find(e => e.id === bodyId) as Body;\n                    if (body) {\n                        const orbitBody = Entity.entities.find(e => e.id === orbits[bodyId]) as Body;\n                        body.orbitBody = orbitBody;\n                    }\n                });\n\n                const lvl = new Level(path, data);\n                lvl.tasks = tsks;\n                Level.currentLevel = lvl;\n\n            });\n    }\n\n    static renderLevelSelect (options: RenderOptions) {\n        \n        const { canvas, ctx } = options;\n        \n        const menuHeight = levelBoxSize + levelBoxSpacing * 2;\n        const menuWidth = (levelBoxSize + levelBoxSpacing) * levels.length - levelBoxSpacing;\n        const menuX = (canvas.width - menuWidth) / 2;\n        const menuY = canvas.height - menuHeight - 10;\n    \n        ctx.font = '12px monospace';\n        ctx.fillStyle = 'white';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n    \n        levels.forEach((level, index) => {\n            const levelBoxX = menuX + index * (levelBoxSize + levelBoxSpacing) + levelBoxSpacing;\n            const levelBoxY = menuY + levelBoxSpacing;\n            const levelBoxText = (index + 1).toString();\n    \n            ctx.strokeStyle = 'white';\n            ctx.strokeRect(levelBoxX, levelBoxY, levelBoxSize, levelBoxSize);\n    \n            ctx.fillStyle = 'white';\n            ctx.fillText(levelBoxText, levelBoxX + levelBoxSize / 2, levelBoxY + levelBoxSize / 2);\n        });\n\n    }\n\n    static onLevelSelectClick (options: RenderOptions, mousePosition: Vector2) {\n\n        const { canvas } = options;\n\n        const menuHeight = levelBoxSize + levelBoxSpacing * 2;\n        const menuWidth = (levelBoxSize + levelBoxSpacing) * levels.length - levelBoxSpacing;\n        const menuX = (canvas.width - menuWidth) / 2;\n        const menuY = canvas.height - menuHeight - 10;\n        \n        levels.forEach((level, index) => {\n            const levelBoxX = menuX + index * (levelBoxSize + levelBoxSpacing) + levelBoxSpacing;\n            const levelBoxY = menuY + levelBoxSpacing;\n    \n            if (mousePosition.x > levelBoxX && mousePosition.x < levelBoxX + levelBoxSize && \n                mousePosition.y > levelBoxY && mousePosition.y < levelBoxY + levelBoxSize) {\n                Level.load(level);\n            }\n        });\n    }\n\n}","import Entity, { EntityRenderOptions, PHYSICS_STEP, PHYSICS_TRAJECTORY_BUFFER_SIZE, Vector2 } from \"./entity\";\nimport { OrbitTaskData } from \"./level\";\n\nexport default class Body extends Entity {\n\n    orbitBody: Body | null = null;\n\n    override update (deltaTime: number) {\n\n        const deltaMp = deltaTime / PHYSICS_STEP * 2;\n\n        if(this.orbitBody !== null) {\n\n            // Calculate orbit relative to the orbit body\n            const distanceX = this.position.x - this.orbitBody.position.x;\n            const distanceY = this.position.y - this.orbitBody.position.y;\n            const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n            const force = this.orbitBody.mass / (distance ** 2);\n            const forceX = force * (distanceX / distance);\n            const forceY = force * (distanceY / distance);\n\n            this.velocity.x -= forceX * PHYSICS_STEP * deltaMp;\n            this.velocity.y -= forceY * PHYSICS_STEP * deltaMp;    \n        }\n        \n        this.position.x += this.velocity.x * PHYSICS_STEP * deltaMp;\n        this.position.y += this.velocity.y * PHYSICS_STEP * deltaMp;\n\n        this.simulateTrajectory();\n    }\n\n    override render (options: EntityRenderOptions) {\n        const { ctx, eScreenPosition, eScreenSize } = options;\n\n        if(this.orbitPoints.length > 0) {\n            this.renderOrbit(options);\n        }\n\n        ctx.strokeStyle = 'white';\n        ctx.fillStyle = 'white';\n\n        ctx.beginPath();\n        ctx.arc(eScreenPosition.x, eScreenPosition.y, eScreenSize.x, 0, 2 * Math.PI);\n        ctx.stroke();\n        ctx.fill();\n\n        \n        if(this.tasks.orbit) \n            this.renderHalo(options, this.tasks.orbit as OrbitTaskData);\n    }\n\n    renderHalo (options: EntityRenderOptions, task: OrbitTaskData) {\n        const { ctx } = options;\n\n        const timeRad = (Date.now() / 10000) % (2 * Math.PI);\n\n        ctx.strokeStyle = task.enterTime ? '#383' : '#555';\n        ctx.setLineDash([2, 5]); // Set the line dash pattern to create a dotted line\n        ctx.beginPath();\n        const cameraX = (this.position.x - options.cameraPosition.x) * options.cameraSize + options.canvas.width / 2;\n        const cameraY = (options.cameraPosition.y - this.position.y) * options.cameraSize + options.canvas.height / 2;\n        const cameraRadius = options.cameraSize * task.radius; \n        ctx.arc(cameraX, cameraY, cameraRadius, timeRad, timeRad + 2 * Math.PI);\n        ctx.stroke();\n        ctx.setLineDash([]); // Reset the line dash pattern to solid line\n    }\n\n    override simulateTrajectory () {\n        const orbitPoints: Vector2[] = [];\n        const step = PHYSICS_STEP;\n        const vel = { x: this.velocity.x, y: this.velocity.y };\n        const pos = { x: this.position.x, y: this.position.y };\n\n        for (let i = 0; i < PHYSICS_TRAJECTORY_BUFFER_SIZE; i++) {\n            if(this.orbitBody) {\n                const distanceX = this.orbitBody.orbitPoints[i].x - pos.x;\n                const distanceY = this.orbitBody.orbitPoints[i].y - pos.y;\n                const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n                const force = this.orbitBody.mass / (distance ** 2);\n                const forceX = force * (distanceX / distance);\n                const forceY = force * (distanceY / distance);\n\n                vel.x += forceX * step;\n                vel.y += forceY * step;\n                pos.x += vel.x * step;\n                pos.y += vel.y * step;\n\n                orbitPoints.push({ x: pos.x, y: pos.y });\n            }\n            else {\n                orbitPoints.push({ x: pos.x, y: pos.y });\n            }\n        }\n\n        this.orbitPoints = orbitPoints;\n    }\n\n}","import Body from \"./body\";\nimport Entity, { EntityRenderOptions, PHYSICS_STEP, PHYSICS_TRAJECTORY_BUFFER_SIZE, Vector2 } from \"./entity\";\nimport Inputs from \"./inputs\";\nimport { OrbitTaskData } from \"./level\";\nimport Orbits, { OrbitsState } from \"./orbits\";\n\n\nexport default class Rocket extends Entity {\n\n    \n    private pointDirection (dir: number, delta: number) {\n        const angle = Math.atan2(this.velocity.x * dir, this.velocity.y * dir);\n        const targetAngle = (angle * 180) / Math.PI;\n        const rotationSpeed = 120; // adjust the rotation speed as desired\n        const maxRotationDelta = rotationSpeed * delta;\n        let angleDelta = targetAngle - this.rotation;\n\n        if (angleDelta > 180) {\n            angleDelta -= 360;\n        } else if (angleDelta < -180) {\n            angleDelta += 360;\n        }\n\n        const rotationDirection = Math.sign(angleDelta);\n        const rotationAmount = rotationDirection * Math.min(Math.abs(angleDelta), maxRotationDelta);\n        this.rotation += rotationAmount;\n    }\n\n    override update (deltaTime: number) {\n\n        const deltaMp = deltaTime / PHYSICS_STEP * 2;\n        const step = PHYSICS_STEP;\n\n        Entity.entities.forEach(ent => {\n            if (ent instanceof Body) {\n                const distanceX = ent.position.x - this.position.x;\n                const distanceY = ent.position.y - this.position.y;\n                const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n                const force = ent.mass / (distance ** 2);\n                const forceX = force * (distanceX / distance);\n                const forceY = force * (distanceY / distance);\n\n                this.velocity.x += forceX * step * deltaMp;\n                this.velocity.y += forceY * step * deltaMp;\n            }\n        });\n\n        // Disable inputs on screens\n        if(Orbits.state === OrbitsState.GAME) {\n            if (Inputs.isKeyDown('ArrowLeft') || Inputs.isKeyDown('a')) {\n                this.rotation -= 120 * deltaTime;\n            }\n            else if (Inputs.isKeyDown('ArrowRight') || Inputs.isKeyDown('d')) {\n                this.rotation += 120 * deltaTime;\n            }\n    \n            if (Inputs.isKeyDown(' ')) {\n                const thrust = 1;\n                const directionVector = {\n                    x: Math.sin((Math.PI / 180) * this.rotation),\n                    y: Math.cos((Math.PI / 180) * this.rotation),\n                }\n                this.velocity.x += thrust * directionVector.x * step * deltaMp;\n                this.velocity.y += thrust * directionVector.y * step * deltaMp;\n            }\n    \n            if(Inputs.isKeyDown('s')) {\n                this.pointDirection(-1, deltaTime);\n            }\n            else if(Inputs.isKeyDown('w')) {\n                this.pointDirection(1, deltaTime);\n            }\n        }\n\n\n        this.position.x += this.velocity.x * step * deltaMp;\n        this.position.y += this.velocity.y * step * deltaMp;\n\n        for(let ent of Entity.entities) {\n            if (ent instanceof Body) {\n                // Calculate distance between rocket and body\n                // If the distance is less than the body's size, the rocket has crashed\n                const distanceX = ent.position.x - this.position.x;\n                const distanceY = ent.position.y - this.position.y;\n                const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n                if(distance < ent.size.x) {\n                    Orbits.endGame(false)\n                    break;\n                }\n                \n                // Check tasks\n                if(ent.tasks) {\n                    for(let t in ent.tasks) {\n                        const task = ent.tasks[t];\n                        if(task.completed)\n                            continue;\n\n                        if(t === 'orbit') {\n                            const orbitTask: OrbitTaskData = task as OrbitTaskData;\n                            if(distance < orbitTask.radius) {\n                                if(!orbitTask.enterTime) {\n                                    orbitTask.enterTime = Date.now();\n                                }\n                                else {\n                                    if(Date.now() - orbitTask.enterTime > orbitTask.time) {\n                                        task.completed = true;\n                                    }\n                                }\n                            }\n                            else {\n                                orbitTask.enterTime = undefined;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        this.rotation = this.rotation % 360;\n\n        this.simulateTrajectory();\n    }\n\n    override render (options: EntityRenderOptions) {\n        const { ctx, eScreenPosition, eScreenSize } = options;\n\n        this.renderOrbit(options, 'rgba(255, 255, 255, 1)');\n\n        ctx.strokeStyle = 'white';\n        ctx.fillStyle = 'white';\n\n        ctx.save();\n        ctx.translate(eScreenPosition.x, eScreenPosition.y);\n        ctx.rotate((Math.PI / 180) * this.rotation);\n        ctx.beginPath();\n        ctx.moveTo(-eScreenSize.x / 2, eScreenSize.y / 2);\n        ctx.lineTo(eScreenSize.x / 2, eScreenSize.y / 2);\n        ctx.lineTo(0, -eScreenSize.y / 2);\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n        ctx.restore();\n    }\n\n    override simulateTrajectory () {\n        const orbitPoints: Vector2[] = [];\n        const step = PHYSICS_STEP;\n        const vel = { x: this.velocity.x, y: this.velocity.y };\n        const pos = { x: this.position.x, y: this.position.y };\n\n        for (let i = 0; i < PHYSICS_TRAJECTORY_BUFFER_SIZE; i++) {\n            let exit = false;\n            for(let ent of Entity.entities) {\n                if (ent instanceof Body) {\n                    let px = ent.position.x;\n                    let py = ent.position.y;\n\n                    if(ent.orbitPoints.length > i) {\n                        px = ent.orbitPoints[i].x;\n                        py = ent.orbitPoints[i].y;\n                    }\n                    \n                    const distanceX = px - pos.x;\n                    const distanceY = py - pos.y;\n                    const distance = Math.sqrt(distanceX ** 2 + distanceY ** 2);\n\n                    if(distance < ent.size.x) {\n                        exit = true;\n                        break;\n                    }\n\n                    const force = ent.mass / (distance ** 2);\n                    const forceX = force * (distanceX / distance);\n                    const forceY = force * (distanceY / distance);\n\n                    vel.x += forceX * step;\n                    vel.y += forceY * step;\n                    \n                }\n            }\n\n            if(exit) \n                break;\n\n            orbitPoints.push({ x: pos.x, y: pos.y });\n            pos.x += vel.x * step;\n            pos.y += vel.y * step;\n        }\n        \n        this.orbitPoints = orbitPoints;\n    }\n\n}","import { getLines } from \"./helpers\";\nimport { OrbitTaskData, Task } from \"./level\";\nimport { RenderOptions } from \"./orbits\";\n\n\nexport default class UI {\n\n\n    static renderTasks(options: RenderOptions, tasks: Task[]) {\n\n        const { ctx } = options;\n\n        const boxWidth = 170;\n        let boxHeight = 30;\n\n        ctx.font = '12px monospace';\n        ctx.fillStyle = 'white';\n        ctx.strokeStyle = 'white';\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n\n        tasks.forEach((task, index) => {\n            ctx.font = '12px monospace';\n            const x = 15;\n\n            const lines = getLines(ctx, task.data.info, 120);\n            const y = 40 + (20 * lines.length) * index;\n            boxHeight += (20 * lines.length);\n\n            for (let i = 0; i < lines.length; i++) {\n                ctx.fillText(lines[i], x, y + 15 * i);\n            }\n\n            switch (task.type) {\n                case 'orbit':\n                    const t = task.data as OrbitTaskData;\n                    if (t.completed) {\n                        ctx.font = 'bold 18px monospace';\n                        ctx.fillText('\\u2713', 152, y + 7);\n                    }\n                    else if (t.enterTime) {\n                        const time = Date.now() - t.enterTime;\n                        const left = (t.time - time) / 1000;\n                        const timeString = `${left.toFixed(1)}s`;\n                        ctx.fillText(timeString, 145, y + 15 * (lines.length / 2));\n                    }\n                    break;\n            }\n        });\n\n        ctx.beginPath();\n        ctx.strokeRect(10, 10, boxWidth, boxHeight);\n        ctx.fillText('Tasks', 15, 20);\n\n        ctx.beginPath();\n        ctx.moveTo(10, 30);\n        ctx.lineTo(10 + boxWidth, 30);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.moveTo(140, 10);\n        ctx.lineTo(140, 10 + boxHeight);\n        ctx.stroke();\n    }\n\n    static renderFailScreen(options: RenderOptions) {\n        const { canvas, ctx } = options;\n\n        ctx.globalCompositeOperation = 'difference';\n        ctx.fillStyle = 'white';\n        ctx.font = 'bold 48px monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('You died', canvas.width / 2, canvas.height / 2);\n        ctx.font = '24px monospace';\n        ctx.fillText('Press R to restart', canvas.width / 2, canvas.height / 2 + 50);\n\n        ctx.globalCompositeOperation = 'source-over';\n    }\n\n    static renderWinScreen(options: RenderOptions) {\n        const { canvas, ctx } = options;\n\n        ctx.globalCompositeOperation = 'difference';\n        ctx.fillStyle = 'white';\n        ctx.font = 'bold 48px monospace';\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        ctx.fillText('You win', canvas.width / 2, canvas.height / 2);\n        ctx.font = '24px monospace';\n        ctx.fillText('Press R to restart', canvas.width / 2, canvas.height / 2 + 50);\n\n        ctx.globalCompositeOperation = 'source-over';\n    }\n\n}","\n/**\n * Transforms an angle in degrees to radians\n * @param angle \n * @returns \n */\nexport function deg2rad (angle: number) {\n    return (angle * Math.PI) / 180;\n}\n\n/**\n * Transforms an angle in radians to degrees\n * @param radians \n * @returns \n */\nexport function rad2deg (radians: number) {\n    return (radians * 180) / Math.PI;\n}\n\n\nexport function getLines(ctx: CanvasRenderingContext2D, text: string, maxWidth: number) {\n    var words = text.split(\" \");\n    var lines = [];\n    var currentLine = words[0];\n\n    for (var i = 1; i < words.length; i++) {\n        var word = words[i];\n        var width = ctx.measureText(currentLine + \" \" + word).width;\n        if (width < maxWidth) {\n            currentLine += \" \" + word;\n        } else {\n            lines.push(currentLine);\n            currentLine = word;\n        }\n    }\n    lines.push(currentLine);\n    return lines;\n}\n\n"],"names":["$a4d7408a1d73b56e$export$50ad20ae8c03d265","OrbitsState","$16adc9a2295ce702$export$2e2bcd8739ae039","idCounter","entities","constructor","position","rotation","size","velocity","id","x","y","mass","orbitPoints","tasks","renderOrbit","bind","push","simulateTrajectory","destroy","filter","e","update","deltaTime","render","options","color","ctx","eScreenPosition","strokeStyle","beginPath","moveTo","forEach","point","cameraPosition","cameraSize","canvas","width","height","lineTo","stroke","length","lastPoint","cameraX","cameraY","lineWidth","$fe083fb717b741f9$export$2e2bcd8739ae039","mousePosition","mouseButtons","keys","mouseClickFlags","keyClickFlags","init","window","addEventListener","onMouseMove","onMouseDown","onMouseUp","onKeyDown","onKeyUp","isKeyDown","key","isKeyPressed","isMouseDown","button","isMousePressed","clientX","clientY","$d96ca57136050667$export$2e2bcd8739ae039","deltaMp","orbitBody","distanceX","distanceY","distance","Math","sqrt","force","forceX","forceY","eScreenSize","fillStyle","arc","PI","fill","orbit","renderHalo","task","timeRad","Date","now","enterTime","setLineDash","cameraRadius","radius","vel","pos","i","args","$e6ee564dbf6128e8$export$2e2bcd8739ae039","pointDirection","dir","delta","angleDelta","targetAngle","atan2","rotationAmount","rotationDirection","sign","min","abs","rotationSpeed","ent","$a4d7408a1d73b56e$export$2e2bcd8739ae039","state","GAME","directionVector","sin","cos","thrust","endGame","t","completed","orbitTask","time","undefined","save","translate","rotate","closePath","restore","exit","px","py","$84ab826914df134a$var$levels","$84ab826914df134a$export$2e2bcd8739ae039","currentLevel","path","data","rawData","load","fetch","then","response","json","orbits","tsks","level","bodies","body","b","Object","type","entity","player","rct","bodyId","find","lvl","renderLevelSelect","menuWidth","$84ab826914df134a$var$levelBoxSize","menuX","menuY","font","textAlign","textBaseline","index","levelBoxX","levelBoxY","levelBoxText","toString","strokeRect","fillText","onLevelSelectClick","$2f4cd9ba4fceb80d$export$2e2bcd8739ae039","renderTasks","boxHeight","lines","text","maxWidth","words","split","currentLine","word","measureText","info","left","timeString","toFixed","renderFailScreen","globalCompositeOperation","renderWinScreen","lastFrameTime","document","getElementById","getContext","imageSmoothingEnabled","imageSmoothingQuality","updateCanvasSize","innerWidth","innerHeight","every","requestAnimationFrame","clearRect","win","rocket"],"version":3,"file":"index.5f5af2e1.js.map"}